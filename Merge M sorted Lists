class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null;
        }

        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;

        for (ListNode node : lists) {
            while (node != null) {
                min = Math.min(min, node.val);
                max = Math.max(max, node.val);
                node = node.next;
            }
        }
        ListNode[] nodes = new ListNode[max - min + 1];

        for (int i = 0; i < lists.length; i++) {
            ListNode n = lists[i];
            while (n != null) {
                ListNode next = n.next;
                ListNode temp = nodes[n.val - min];
                nodes[n.val - min] = n;
                n.next = temp;
                n = next;
            }
        }

        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        for (ListNode node : nodes) {
            if (node != null) {
                current.next = node;
                while (node.next != null) {
                    node = node.next;
                }
                current = node;
            }
        }

        return dummy.next;
    }
}
