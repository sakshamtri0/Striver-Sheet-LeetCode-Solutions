class Solution {
    public List<List<String>> solveNQueens(int n) {
        return new java.util.AbstractList<>(){
            List<List<String>> res = null;
            private void build(){
                if(res!=null) return;
                res = new ArrayList<>();
                dfs(0, n, new HashSet<>(), new HashSet<>(),new HashSet<>(), new ArrayList<>());
            }
            public int size(){
                build();
                return res.size();
            }
            public List<String> get(int i){
                build();
                return res.get(i);
            }
            private void dfs(int i, int n, Set<Integer> cols, Set<Integer> posDiag, Set<Integer> negDiag, List<String> t){
                if(i==n){
                    res.add(new ArrayList<>(t));
                    return;
                }
                for(int k=0;k<n;k++){
                    if(cols.contains(k) || posDiag.contains(i+k) || negDiag.contains(i-k)){
                        continue;
                    }
                    char[] arr = new char[n];
                    Arrays.fill(arr, '.');
                    arr[k] = 'Q';
                    t.add(new String(arr));
                    cols.add(k);
                    posDiag.add(i+k);
                    negDiag.add(i-k);
                    dfs(i+1, n, cols, posDiag, negDiag, t);
                    negDiag.remove(i-k);
                    posDiag.remove(i+k);
                    cols.remove(k);
                    t.remove(t.size()-1);
                }
            }
        };
    }
}
