class Solution {
    List<List<Integer>> end = new LinkedList<>();
    public void findAll(int i, int[] curr, int count[]) {
        if(i == 22) {
            List<Integer> ls = new LinkedList<>();
            int k = 0, num = 0;
            for(int j = 0; j<22; j++) {
                k = curr[j];
                num = j-10;
                while(k>0) {
                    ls.add(num);
                    k--;
                }
            }
            end.add(ls);
            return;
        }
        if(count[i]==0) findAll(i+1, curr, count);
        else {
            for(int j = 0; j<=count[i]; j++) {
                curr[i] = j;
                findAll(i+1, curr, count);
            }
        }
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        int count[] = new int[22];
        int curr[] = new int[22];
        for(int val : nums) {
            count[val+10]++;
        }
        int num = 0;
        findAll(0, curr, count);
        return end;
    }
}
