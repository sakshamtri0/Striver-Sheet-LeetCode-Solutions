public class KthLargest {
    private final int[] heap;
    private int size;
    private final int k;

    public KthLargest(int k, int[] nums) {
        this.k = k;
        this.heap = new int[k];
        // 1) Copy up to k elements…
        size = Math.min(nums.length, k);
        System.arraycopy(nums, 0, heap, 0, size);
        // …and heapify in O(k)
        for (int i = size/2 - 1; i >= 0; i--) siftDown(i);

        // 2) Handle the rest
        for (int i = k; i < nums.length; i++) {
            add(nums[i]);
        }
    }

    public int add(int val) {
        if (size < k) {
            heap[size++] = val;
            siftUp(size - 1);
        } else if (val > heap[0]) {
            heap[0] = val;
            siftDown(0);
        }
        return heap[0];
    }

    private void siftDown(int i) {
        int v = heap[i];
        int half = size / 2;
        while (i < half) {
            int l = 2*i + 1, r = l + 1, j = (r < size && heap[r] < heap[l]) ? r : l;
            if (heap[j] >= v) break;
            heap[i] = heap[j];
            i = j;
        }
        heap[i] = v;
    }

    private void siftUp(int i) {
        int v = heap[i];
        while (i > 0) {
            int p = (i - 1) / 2;
            if (heap[p] <= v) break;
            heap[i] = heap[p];
            i = p;
        }
        heap[i] = v;
    }
}
