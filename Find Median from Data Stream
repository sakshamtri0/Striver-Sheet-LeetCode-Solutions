class MedianFinder {
    int shift = 100_000;
    int[] a = new int[2*shift+1];
    int min = 0;
    int max = 0;

    int size = 0;
    int lastSize = 0;
    int lower = 0;
    int lowerCount = 0; // # entries <= lower
    int upper = 0;
    int upperCount = 0; // # entries >= upper

    public MedianFinder() {
    }

    public void addNum(int num) {
        size++;
        a[shift+num]++;
        if(lowerCount == 0) {
            lower = shift+num;
            lowerCount = 1;
            upper = shift+num;
            upperCount = 1;
            return;
        }
        if(shift+num <= lower) lowerCount++;
        if(shift+num >= upper) upperCount++;
    }
    
    public double findMedian() {
        if(size == 1) return lower - shift;

        if(lastSize != size) {
            int tgt = size/2 + size%2;
            while(lowerCount < tgt) {
                lower++;
                lowerCount+=a[lower];
            }
            while(lowerCount-a[lower] >= tgt) {
                lowerCount-=a[lower];
                lower--;
            }
    
            while(upperCount <tgt) {
                upper--;
                upperCount+=a[upper];
            }
            while(upperCount-a[upper] >= tgt) {
                upperCount-=a[upper];
                upper++;
            }
            lastSize = size;
        }

        return ((double)lower+upper-2*shift)/2;
    }
}
