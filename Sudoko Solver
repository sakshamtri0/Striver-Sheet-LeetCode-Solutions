class Solution {
    static final int SUDOKU_SIZE = 9;
    int[] rows = new int[SUDOKU_SIZE];
    int[] cols = new int[SUDOKU_SIZE];
    int[] blocks = new int[SUDOKU_SIZE];
    List<int[]> empties = new ArrayList<>();

    public void solveSudoku(char[][] board) {
        int FULL_MASK = (1 << SUDOKU_SIZE) - 1;
        Arrays.fill(rows, FULL_MASK);
        Arrays.fill(cols, FULL_MASK);
        Arrays.fill(blocks, FULL_MASK);

        for (int r = 0; r < SUDOKU_SIZE; r++) {
            for (int c = 0; c < SUDOKU_SIZE; c++) {
                if (board[r][c] == '.') {
                    empties.add(new int[]{r, c});
                } else {
                    int val = board[r][c] - '1';
                    int mask = ~(1 << val);
                    rows[r] &= mask;
                    cols[c] &= mask;
                    blocks[(r / 3) * 3 + c / 3] &= mask;
                }
            }
        }

        backtrack(board);
    }

    private boolean backtrack(char[][] board) {
        if (empties.isEmpty()) return true;

        int minOptions = 10;
        int bestIdx = -1;
        for (int i = 0; i < empties.size(); i++) {
            int r = empties.get(i)[0], c = empties.get(i)[1];
            int mask = rows[r] & cols[c] & blocks[(r / 3) * 3 + c / 3];
            int count = Integer.bitCount(mask);
            if (count < minOptions) {
                minOptions = count;
                bestIdx = i;
            }
            if (count == 1) break;
        }

        int[] cell = empties.remove(bestIdx);
        int r = cell[0], c = cell[1];
        int blockIdx = (r / 3) * 3 + c / 3;
        int options = rows[r] & cols[c] & blocks[blockIdx];

        for (int d = 0; d < SUDOKU_SIZE; d++) {
            int bit = 1 << d;
            if ((options & bit) == 0) continue;

            board[r][c] = (char) (d + '1');
            rows[r] ^= bit;
            cols[c] ^= bit;
            blocks[blockIdx] ^= bit;

            if (backtrack(board)) return true;

            board[r][c] = '.';
            rows[r] ^= bit;
            cols[c] ^= bit;
            blocks[blockIdx] ^= bit;
        }

        empties.add(bestIdx, cell);
        return false;
    }
}
