class Solution {
    public List<List<String>> partition(String s) {
        return new java.util.AbstractList<>(){
            List<List<String>> res = null;
            private void build(){
                if(res!=null) return;
                res = new ArrayList<>();
                dfs(0, s, new ArrayList<>());
            }
            @Override
            public int size(){
                build();
                return res.size();
            }
            @Override
            public List<String> get(int i){
                build();
                return res.get(i);
            }
            private void dfs(int idx, String s, List<String> t){
                if(idx==s.length()){
                    res.add(new ArrayList<>(t));
                    return;
                }
                for(int i=idx+1;i<=s.length();i++){
                    if(isPalin(s, idx, i-1)){
                        t.add(s.substring(idx, i));
                        dfs(i, s, t);
                        t.remove(t.size()-1);
                    }
                }
            }
            private boolean isPalin(String s, int l, int r){
                while(l<=r){
                    if(s.charAt(l)!=s.charAt(r)) return false;
                    l++;
                    r--;
                }
                return true;
            }
        };
    }
}
